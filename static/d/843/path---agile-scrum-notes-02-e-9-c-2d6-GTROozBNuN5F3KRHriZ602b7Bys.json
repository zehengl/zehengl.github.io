{"data":{"site":{"siteMetadata":{"title":"zehengl","author":"Zeheng Li"}},"markdownRemark":{"id":"64d2961f-f910-5220-824c-ce2dcd52cfee","excerpt":"Crystal lightweight approach Learn (Shu), Collect (Ha), Invent/Blend (Ri) techniques Seven principle Frequent Delivery Reflective Improvement Close(Osmotic…","html":"<h2>Crystal</h2>\n<ul>\n<li>\n<p><strong>lightweight approach</strong></p>\n</li>\n<li>\n<p>Learn (Shu), Collect (Ha), Invent/Blend (Ri) techniques</p>\n</li>\n<li>\n<p>Seven principle</p>\n<ul>\n<li>Frequent Delivery</li>\n<li>Reflective Improvement</li>\n<li>Close(Osmotic) Communication</li>\n<li>Personal Safety</li>\n<li>Focus</li>\n<li>Easy access to expert users</li>\n<li>Technical environment</li>\n</ul>\n</li>\n</ul>\n<h2>Extreme Programming (XP)</h2>\n<ul>\n<li>\n<p><strong>lightweight approach</strong></p>\n</li>\n<li>\n<p>A system of practices that a community of software developers is evolving to address the problem of quickly delivering quality software, and then evolving it to meet business problems</p>\n</li>\n<li>\n<p>Take proven practices to the extreme</p>\n<ul>\n<li>If testing is good, let everybody test all the time</li>\n<li>If code reviews are good, review all the time</li>\n<li>If design is good, re-factor all the time</li>\n<li>If integration is good, integrate all the time</li>\n<li>If simplicity is good, do the simplest thing that could possibly work</li>\n<li>If short iterations are good, make them as short as possible</li>\n</ul>\n</li>\n<li>\n<p>Values</p>\n<ul>\n<li>Communication</li>\n<li>Among the team</li>\n<li>Between the team and customer</li>\n<li>Simplicity</li>\n<li>Avoid over-engineering</li>\n<li>Focus on unlocking the value fast</li>\n<li>Feedback</li>\n<li>Helps the team steer in the right direction</li>\n<li>Re-assures the customer about what the team is building</li>\n<li>Courage</li>\n<li>To follow the right practices, standards</li>\n<li>Arises out of the confidence that basic hygiene is in place</li>\n</ul>\n</li>\n<li>\n<p>Practices</p>\n<ul>\n<li>The Planning Game</li>\n<li>Small releases</li>\n<li>Metaphor</li>\n<li>Simple design</li>\n<li>Testing</li>\n<li>Refactoring</li>\n<li>Pair programming</li>\n<li>Collective code ownership</li>\n<li>Continuous integration</li>\n<li>40 hour week</li>\n<li>Onsite customer</li>\n<li>Coding standards</li>\n<li>Open workspace</li>\n<li>Daily schema migration</li>\n</ul>\n</li>\n<li>\n<p>Benefits</p>\n<ul>\n<li>Team</li>\n<li>gets clear requirements</li>\n<li>makes technical decisions and follows best practices</li>\n<li>not over-worked</li>\n<li>Customer</li>\n<li>gets business value fast</li>\n<li>gets accurate feedback</li>\n<li>can make business decisions and implement changes faster</li>\n</ul>\n</li>\n</ul>\n<h2>DSDM (revised version, Atern)</h2>\n<ul>\n<li>\n<p><strong>heavy approach</strong></p>\n</li>\n<li>\n<p>Basic concept</p>\n<ul>\n<li>User involvement ensures the right business solution</li>\n<li>Requirements evolve, but timescale is fixed</li>\n<li>Early delivery enables early pay-back</li>\n<li>Implement the 80/20 rule</li>\n<li>Nothing is built perfectly first time</li>\n</ul>\n</li>\n<li>\n<p>Principles</p>\n<ul>\n<li>Focus on the business need</li>\n<li>Delivery on time</li>\n<li>Collaborate</li>\n<li>Never compromise on quality</li>\n<li>Build incrementally from firm foundations</li>\n<li>Develop iteratively</li>\n<li>Communicate continuously and clearly</li>\n<li>Demonstrate control</li>\n</ul>\n</li>\n<li>\n<p>Five core techniques</p>\n<ul>\n<li>Iterative development</li>\n<li>Time-boxing</li>\n<li>MoSCoW prioritization</li>\n<li>Must</li>\n<li>Should</li>\n<li>Could</li>\n<li>Would</li>\n<li>Facilitated workshops</li>\n<li>Modeling</li>\n</ul>\n</li>\n</ul>\n<h2>Feature-Driven Development (FDD)</h2>\n<ul>\n<li>\n<p><strong>heavy approach</strong></p>\n</li>\n<li>\n<p>Core Values</p>\n<ul>\n<li>A system for building systems is essential</li>\n<li>Simple is better</li>\n<li>Process steps should be obviously valuable to team members</li>\n<li>Good processes move to the background</li>\n</ul>\n</li>\n<li>\n<p>Six Roles</p>\n<ul>\n<li>Project Manager</li>\n<li>Chief Architect</li>\n<li>Development Manager</li>\n<li>Chief Programmers</li>\n<li>Class Owners (aka Developers)</li>\n<li>Domain experts</li>\n</ul>\n</li>\n<li>\n<p>Five Processes</p>\n<ul>\n<li><em>Per project</em></li>\n<li>Develop an overall model</li>\n<li>Build a features list</li>\n<li>Plan by feature</li>\n<li><em>Per feature</em></li>\n<li>Design by feature</li>\n<li>Build by feature</li>\n</ul>\n</li>\n<li>\n<p>Best for team with 10-250 developers, handy pool of talented workers, focus on good object model</p>\n</li>\n</ul>\n<h2>Agile Unified Process</h2>\n<ul>\n<li>\n<p><strong>heavy approach</strong></p>\n</li>\n<li>\n<p>Based on the Rational Unified Process (RUP), a method of managing Object Oriented Software Development</p>\n<ul>\n<li>Develop iteratively – risk being the primary driver</li>\n<li>Manage requirements</li>\n<li>Employ component-based architecture</li>\n<li>Model software visually</li>\n<li>Continuously verify quality</li>\n<li>Control changes</li>\n</ul>\n</li>\n<li>\n<p>4 Life-cycle phases</p>\n<ul>\n<li>Inception</li>\n<li>Elaboration</li>\n<li>Construction</li>\n<li>Transition</li>\n</ul>\n</li>\n<li>\n<p>6 Engineering disciplines</p>\n<ul>\n<li>Business modeling</li>\n<li>Requirements</li>\n<li>Analysis and Design</li>\n<li>Implementation</li>\n<li>Test</li>\n<li>Deployment</li>\n</ul>\n</li>\n<li>\n<p>3 Supporting disciplines</p>\n<ul>\n<li>Environment management</li>\n<li>Configuration and Change management</li>\n<li>Project Management</li>\n</ul>\n</li>\n</ul>\n<h2>Scrum</h2>\n<ul>\n<li>\n<p><strong>lightweight approach</strong></p>\n</li>\n<li>\n<p>Lifecycle</p>\n<ol>\n<li>Inputs from stakeholders</li>\n<li>Product backlog</li>\n<li>Sprint planning meeting</li>\n<li>Sprint backlog</li>\n<li>1-4 week sprint w. daily standup meeting</li>\n<li>Sprint review</li>\n<li>Sprint retrospective</li>\n</ol>\n</li>\n</ul>","frontmatter":{"title":"Agile Scrum Note 02: Methodologies","date":"December 07, 2015","description":"Some popular Agile methodologies."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/agile-scrum-notes-02/","previous":{"fields":{"slug":"/agile-scrum-notes-01/"},"frontmatter":{"title":"Agile Scrum Note 01: Introduction"}},"next":{"fields":{"slug":"/pip-install-mysqlclient-on-macos/"},"frontmatter":{"title":"How to pip install MYSQL-python/mysqlclient on macOS"}}}}
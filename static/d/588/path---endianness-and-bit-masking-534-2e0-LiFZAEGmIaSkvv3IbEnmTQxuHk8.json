{"data":{"site":{"siteMetadata":{"title":"zehengl","author":"Zeheng Li"}},"markdownRemark":{"id":"ab134481-4128-5a6f-b386-b03174722812","excerpt":"Endianness See this  wiki  for background knowledge about endianness. It refers to the ordering of bytes. Big endianness is to store with the most significant…","html":"<h2>Endianness</h2>\n<p>See this <a href=\"https://en.wikipedia.org/wiki/Endianness\">wiki</a> for background knowledge about endianness. It refers to the ordering of bytes.</p>\n<ul>\n<li>Big endianness is to store with the most significant bit coming first.</li>\n<li>Little endianness is to store in the opposite order where the most significant bit comes last.</li>\n</ul>\n<p>For example, we have a <strong>hex</strong> number 0A0B0C0D</p>\n<p>Note that endianness talks about the order of <strong>bytes</strong></p>\n<p><em>0A0B0C0D</em> should be seperated into chunks with size of 8 bits</p>\n<p>that is, 0A | 0B | 0C | 0D</p>\n<p>In big endianness, it shall be written as 0A0B0C0D</p>\n<p>In little endianness, it shall be written as 0D0C0B0A</p>\n<h2>Python</h2>\n<p>Python provides a handy library (<strong>struct</strong>) to handle such conversion. See <a href=\"https://docs.python.org/2/library/struct.html\">here</a> for deatil.</p>\n<p><div id=\"gist41274836\" class=\"gist\">\n    <div class=\"gist-file\">\n      <div class=\"gist-data\">\n        <div class=\"js-gist-file-update-container js-task-list-container file-box\">\n  <div id=\"file-endianness_and_bit_masking-py\" class=\"file\">\n    \n\n  <div itemprop=\"text\" class=\"Box-body px-0 blob-wrapper data type-python \">\n      \n<table class=\"highlight tab-size js-file-line-container\" data-tab-size=\"8\">\n      <tr>\n        <td id=\"file-endianness_and_bit_masking-py-L1\" class=\"blob-num js-line-number\" data-line-number=\"1\"></td>\n        <td id=\"file-endianness_and_bit_masking-py-LC1\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">from</span> struct <span class=\"pl-k\">import</span> pack, unpack</td>\n      </tr>\n      <tr>\n        <td id=\"file-endianness_and_bit_masking-py-L2\" class=\"blob-num js-line-number\" data-line-number=\"2\"></td>\n        <td id=\"file-endianness_and_bit_masking-py-LC2\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-k\">from</span> binascii <span class=\"pl-k\">import</span> hexlify</td>\n      </tr>\n      <tr>\n        <td id=\"file-endianness_and_bit_masking-py-L3\" class=\"blob-num js-line-number\" data-line-number=\"3\"></td>\n        <td id=\"file-endianness_and_bit_masking-py-LC3\" class=\"blob-code blob-code-inner js-file-line\">\n</td>\n      </tr>\n      <tr>\n        <td id=\"file-endianness_and_bit_masking-py-L4\" class=\"blob-num js-line-number\" data-line-number=\"4\"></td>\n        <td id=\"file-endianness_and_bit_masking-py-LC4\" class=\"blob-code blob-code-inner js-file-line\">var1, var2, var3 <span class=\"pl-k\">=</span> <span class=\"pl-c1\">1025</span>, <span class=\"pl-c1\">2050</span>, <span class=\"pl-c1\">4099</span></td>\n      </tr>\n      <tr>\n        <td id=\"file-endianness_and_bit_masking-py-L5\" class=\"blob-num js-line-number\" data-line-number=\"5\"></td>\n        <td id=\"file-endianness_and_bit_masking-py-LC5\" class=\"blob-code blob-code-inner js-file-line\">\n</td>\n      </tr>\n      <tr>\n        <td id=\"file-endianness_and_bit_masking-py-L6\" class=\"blob-num js-line-number\" data-line-number=\"6\"></td>\n        <td id=\"file-endianness_and_bit_masking-py-LC6\" class=\"blob-code blob-code-inner js-file-line\">data_big_endian <span class=\"pl-k\">=</span> pack(<span class=\"pl-s\"><span class=\"pl-pds\">&#39;</span>&gt;3h<span class=\"pl-pds\">&#39;</span></span>, var1, var2, var3)</td>\n      </tr>\n      <tr>\n        <td id=\"file-endianness_and_bit_masking-py-L7\" class=\"blob-num js-line-number\" data-line-number=\"7\"></td>\n        <td id=\"file-endianness_and_bit_masking-py-LC7\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c1\">print</span> hexlify(data_big_endian)</td>\n      </tr>\n      <tr>\n        <td id=\"file-endianness_and_bit_masking-py-L8\" class=\"blob-num js-line-number\" data-line-number=\"8\"></td>\n        <td id=\"file-endianness_and_bit_masking-py-LC8\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c1\">print</span> unpack(<span class=\"pl-s\"><span class=\"pl-pds\">&#39;</span>&gt;3h<span class=\"pl-pds\">&#39;</span></span>, data_big_endian)</td>\n      </tr>\n      <tr>\n        <td id=\"file-endianness_and_bit_masking-py-L9\" class=\"blob-num js-line-number\" data-line-number=\"9\"></td>\n        <td id=\"file-endianness_and_bit_masking-py-LC9\" class=\"blob-code blob-code-inner js-file-line\">\n</td>\n      </tr>\n      <tr>\n        <td id=\"file-endianness_and_bit_masking-py-L10\" class=\"blob-num js-line-number\" data-line-number=\"10\"></td>\n        <td id=\"file-endianness_and_bit_masking-py-LC10\" class=\"blob-code blob-code-inner js-file-line\">data_little_endian <span class=\"pl-k\">=</span> pack(<span class=\"pl-s\"><span class=\"pl-pds\">&#39;</span>&lt;3h<span class=\"pl-pds\">&#39;</span></span>, var1, var2, var3)</td>\n      </tr>\n      <tr>\n        <td id=\"file-endianness_and_bit_masking-py-L11\" class=\"blob-num js-line-number\" data-line-number=\"11\"></td>\n        <td id=\"file-endianness_and_bit_masking-py-LC11\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c1\">print</span> hexlify(data_little_endian)</td>\n      </tr>\n      <tr>\n        <td id=\"file-endianness_and_bit_masking-py-L12\" class=\"blob-num js-line-number\" data-line-number=\"12\"></td>\n        <td id=\"file-endianness_and_bit_masking-py-LC12\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c1\">print</span> unpack(<span class=\"pl-s\"><span class=\"pl-pds\">&#39;</span>&lt;3h<span class=\"pl-pds\">&#39;</span></span>, data_little_endian)</td>\n      </tr>\n      <tr>\n        <td id=\"file-endianness_and_bit_masking-py-L13\" class=\"blob-num js-line-number\" data-line-number=\"13\"></td>\n        <td id=\"file-endianness_and_bit_masking-py-LC13\" class=\"blob-code blob-code-inner js-file-line\">\n</td>\n      </tr>\n      <tr>\n        <td id=\"file-endianness_and_bit_masking-py-L14\" class=\"blob-num js-line-number\" data-line-number=\"14\"></td>\n        <td id=\"file-endianness_and_bit_masking-py-LC14\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c1\">print</span> <span class=\"pl-c1\">bin</span>(var1), var1</td>\n      </tr>\n      <tr>\n        <td id=\"file-endianness_and_bit_masking-py-L15\" class=\"blob-num js-line-number\" data-line-number=\"15\"></td>\n        <td id=\"file-endianness_and_bit_masking-py-LC15\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c1\">print</span> <span class=\"pl-c1\">bin</span>(var1 <span class=\"pl-k\">&amp;</span> <span class=\"pl-c1\"><span class=\"pl-k\">0b</span>111</span>), var1 <span class=\"pl-k\">&amp;</span> <span class=\"pl-c1\"><span class=\"pl-k\">0b</span>111</span></td>\n      </tr>\n      <tr>\n        <td id=\"file-endianness_and_bit_masking-py-L16\" class=\"blob-num js-line-number\" data-line-number=\"16\"></td>\n        <td id=\"file-endianness_and_bit_masking-py-LC16\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c1\">print</span> <span class=\"pl-c1\">bin</span>(var1 <span class=\"pl-k\">|</span> <span class=\"pl-c1\"><span class=\"pl-k\">0b</span>111</span>), var1 <span class=\"pl-k\">|</span> <span class=\"pl-c1\"><span class=\"pl-k\">0b</span>111</span></td>\n      </tr>\n      <tr>\n        <td id=\"file-endianness_and_bit_masking-py-L17\" class=\"blob-num js-line-number\" data-line-number=\"17\"></td>\n        <td id=\"file-endianness_and_bit_masking-py-LC17\" class=\"blob-code blob-code-inner js-file-line\"><span class=\"pl-c1\">print</span> <span class=\"pl-c1\">bin</span>(var1 <span class=\"pl-k\">^</span> <span class=\"pl-c1\"><span class=\"pl-k\">0b</span>111</span>), var1 <span class=\"pl-k\">^</span> <span class=\"pl-c1\"><span class=\"pl-k\">0b</span>111</span></td>\n      </tr>\n</table>\n\n\n  </div>\n\n  </div>\n</div>\n\n      </div>\n      <div class=\"gist-meta\">\n        <a href=\"https://gist.github.com/zehengl/1c592f9e3f3cc5797f03c02e8e953b28/raw/6bb593e118978b9bc87565997888a3d6dc271b06/endianness_and_bit_masking.py\" style=\"float:right\">view raw</a>\n        <a href=\"https://gist.github.com/zehengl/1c592f9e3f3cc5797f03c02e8e953b28#file-endianness_and_bit_masking-py\">endianness_and_bit_masking.py</a>\n        hosted with &#10084; by <a href=\"https://github.com\">GitHub</a>\n      </div>\n    </div>\n</div></p>\n<p><strong>Explanation:</strong></p>\n<p>Say, we want to create the big/little endian representation for three numbers: 1025, 2050, and 4099</p>\n<p>1025 = 1024 + 1, written in hex, it is 0x0401</p>\n<p>2050 = 2048 + 2, written in hex, it is 0x0802</p>\n<p>4099 = 4096 + 3, written in hex, it is 0x1003</p>\n<p>Using struct, we can <em>pack</em> these numbers with a formatted string “>hhh” or “>3h”</p>\n<ul>\n<li><strong>></strong> means big endian</li>\n<li><strong>h</strong> means short int, which is 2 byte or 16 bit</li>\n</ul>\n<p>Similarily, we can <em>pack</em> those numbers with a formatted string “&#x3C;hhh” or “&#x3C;3h”</p>\n<ul>\n<li><strong>&#x3C;</strong> means little endian</li>\n</ul>\n<p>Therefore, these three numbers are represented:</p>\n<ul>\n<li>in big endian, 040108021003</li>\n<li>in little endian, 010402080310</li>\n</ul>\n<p>In order to extract the numbers, we use <em>unpack</em> with the corresponding formatted string</p>\n<h2>Bit Masking</h2>\n<p>Bit level and/or/xor manipualtions</p>\n<p>and, take certain bits</p>\n<p>or, set certain bits</p>\n<p>xor, toggle certain bits</p>\n<p>For example, 1025 which is 0b10000000001</p>\n<p>take last two bits: 1025 &#x26; 0b11 = 0b1</p>\n<p>set last two bits: 1025 | 0b11 = 0b10000000111 = 1031</p>\n<p>toggle last two bits: 1025 ^ 0b11 = 0b10000000110 = 1030</p>","frontmatter":{"title":"Endianness and Bit Masking","date":"2016-06-09","description":"How to handle some bit level data manipualtions in Python."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/endianness-and-bit-masking/","previous":{"fields":{"slug":"/agile-scrum-simulation-test/"},"frontmatter":{"title":"Agile Scrum Simulation Test"}},"next":{"fields":{"slug":"/string-to-qr-code/"},"frontmatter":{"title":"String to QR Code"}}}}
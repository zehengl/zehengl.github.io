{"data":{"site":{"siteMetadata":{"title":"zehengl","author":"Zeheng Li"}},"markdownRemark":{"id":"1cd68647-b515-5a3d-b06d-358843044520","excerpt":"Scrum on large projects Split into smaller teams each delivering a logical portion Logical portion is determined by being able to deliver tangible customer…","html":"<h2>Scrum on large projects</h2>\n<ul>\n<li>\n<p>Split into smaller teams each delivering a logical portion</p>\n</li>\n<li>\n<p>Logical portion is determined by being able to deliver tangible customer value on their own</p>\n</li>\n<li>\n<p>Bad division:</p>\n<ul>\n<li>Dev Team, QA Team, Regression Team, Automation Team</li>\n<li>UI Team, Database Team, Server Team</li>\n</ul>\n</li>\n<li>\n<p>Good division:</p>\n<ul>\n<li>Platform Team, Content Team</li>\n<li>Deposits Module, Advances Module</li>\n</ul>\n</li>\n<li>\n<p>Each team is cross-functional and has its own backlog</p>\n</li>\n<li>\n<p>Some stories/epics may run across teams</p>\n</li>\n<li>\n<p>Dependencies across teams have to be handled carefully</p>\n</li>\n<li>\n<p>Some “look-ahead planning” helps</p>\n</li>\n</ul>\n<h2>Scrum-of-Scrum</h2>\n<ul>\n<li>\n<p>Useful in circumstances when multiple teams are working on the same system or systems with multiple integration points</p>\n</li>\n<li>\n<p>It is essentially a meeting where representatives (1 or 2) from each Scrum team attends</p>\n<ul>\n<li>Product Owner, Scrum Master/Architect</li>\n</ul>\n</li>\n<li>\n<p>The focus of this meeting is on inter-dependencies and coordination</p>\n</li>\n<li>\n<p>This meeting need not be daily – the frequency should be governed by the level of interaction required</p>\n</li>\n</ul>\n<h2>Product coordination teams</h2>\n<ul>\n<li>\n<p>Assign few members whose job is to coordinate across multiple teams</p>\n</li>\n<li>\n<p>What to coordinate?</p>\n<ul>\n<li>High priority stories or epics that go across multiple teams</li>\n<li>Sort out technical issues; interface definitions</li>\n<li>Ensure consistency and uniformity of design</li>\n<li>Bubbling up any issues with regard to dependencies</li>\n</ul>\n</li>\n<li>\n<p>Coordination may either be a full-time or part-time role depending upon how tight the dependencies are</p>\n</li>\n<li>\n<p>Sometimes works better than Scrum-of-Scrums because responsibility is assigned</p>\n</li>\n</ul>\n<h2>Scrum on maintenance projects</h2>\n<ul>\n<li>\n<p>Two questions:</p>\n<ul>\n<li>Can you define a clear, prioritized backlog of enhancement requests?</li>\n<li>Can you estimate the time required for the requests with reasonable certainty?</li>\n</ul>\n</li>\n<li>\n<p>If the answer is YES, you can apply Scrum to such a project</p>\n<ul>\n<li>Provide larger buffer for ad-hoc requests that are inevitable</li>\n<li>Alternately, establish a “resolution” or “sustaining” team to shield the team working on new features</li>\n</ul>\n</li>\n</ul>\n<h2>Distributed scrum teams</h2>\n<ul>\n<li>\n<p>No doubt running a distributed Scrum team is challenging:</p>\n<ul>\n<li>Scrum emphasizes face-to-face communication, cross- functional teams and close collaboration</li>\n<li>Scrum rituals like daily stand-ups, sprint planning, review and retrospective become more challenging</li>\n</ul>\n</li>\n<li>\n<p>However:</p>\n<ul>\n<li>Distributed Scrum is still better than distributed waterfall</li>\n<li>It is still possible to implement Scrum with distributed teams – with some best practices to help</li>\n</ul>\n</li>\n</ul>\n<h2>Best practices in distributed scrum</h2>\n<ul>\n<li>\n<p>If you had a distributed team with time zones nearly 12 hours away, what would you prefer?</p>\n<ul>\n<li>Teams working away on huge requirements documents and come back with something after 6 months? OR</li>\n<li>Frequent check points - preferably something tangible to see every week?</li>\n</ul>\n</li>\n<li>\n<p>Three important things to keep in mind:</p>\n<ul>\n<li>Apply/Tailor Scrum practices effectively</li>\n<li>Follow good software engineering practices</li>\n<li>Work on the people-to-people equations</li>\n</ul>\n</li>\n</ul>\n<h2>Scenario-1: Team in India; PO in US</h2>\n<ul>\n<li>\n<p>PO is remote and all or most of the team is in India</p>\n</li>\n<li>\n<p>Suggested Approach</p>\n<ul>\n<li>Co-locate the Scrum Master with the team</li>\n<li>All meetings with PO are visual (webex/web cams)</li>\n<li>Mailing list with PO and entire team to be kept in cc. for all project related emails</li>\n<li>One hour overlap between PO and team daily</li>\n<li>High travel budget to have face time between PO and team</li>\n<li>Sprint planning split up into Pre-planning, offline analysis and finalization</li>\n<li>Review and retrospectives on Webex</li>\n</ul>\n</li>\n</ul>\n<h2>Scenario-2: Team split in two locations</h2>\n<ul>\n<li>\n<p>Say, 1 Dev and 3 Testers in India; 3 Dev and 1 Tester in US</p>\n</li>\n<li>\n<p>Suggested Approach</p>\n<ul>\n<li>2 Scrum Masters (one in each location)</li>\n<li>Scrum Masters may have lighter workload than a regular Scrum Master</li>\n<li>2 daily stand-up meetings with notes from each meeting read out at start of the other meeting</li>\n<li>Pay lot of attention to team dynamics</li>\n<li>Pick and choose recommendations made for Scenario-1</li>\n</ul>\n</li>\n</ul>\n<h2>People practices in distributed Scrum</h2>\n<ul>\n<li>\n<p>Developing good relations between people is absolutely critical – more so in a distributed team</p>\n</li>\n<li>\n<p>So you need to invest in developing the relations and ensuring good communication channels</p>\n</li>\n<li>\n<p>Disagreement is OK; Perceiving the other as evil is dangerous</p>\n</li>\n<li>\n<p>Allow for higher travel budget – face time is irreplaceable</p>\n<ul>\n<li>Co-locate key members for critical periods</li>\n<li>Rotate team members periodically across locations</li>\n</ul>\n</li>\n<li>\n<p>Cultural exchanges – Team wikis</p>\n</li>\n</ul>\n<h2>Practices in distributed scrum</h2>\n<ul>\n<li>\n<p>Leverage technology:</p>\n<ul>\n<li>Goodweb-conferencingtools</li>\n<li>Good speaker phone to make tele-conferencing easier</li>\n<li>Switch on web-cameras/use video conferences</li>\n<li>Instantmessaging</li>\n</ul>\n</li>\n<li>\n<p>Be sensitive about timing of interaction</p>\n<ul>\n<li>Working hours</li>\n<li>Vacation times</li>\n</ul>\n</li>\n</ul>\n<h2>Scrum-Contracting</h2>\n<ul>\n<li>\n<p>Does the customer need to know about Scrum?</p>\n<ul>\n<li>How to “sell” the methodology to the customer</li>\n<li>How to tailor contracts to the methodology</li>\n</ul>\n</li>\n<li>\n<p>Ask the customer if he would like the following:</p>\n<ul>\n<li>A demo of working system every few weeks</li>\n<li>Opportunity to make changes to requirements as long as the team has not started working on them</li>\n</ul>\n</li>\n<li>\n<p>But also tell them that:</p>\n<ul>\n<li>They need to be available to the team for answering questions</li>\n<li>The team must be allowed to self-manage</li>\n<li>They cannot expect instant gratification on change requests</li>\n</ul>\n</li>\n</ul>\n<h2>Scrum in fixed price projects</h2>\n<ul>\n<li>Challenge: Scrum advocates being “responsive” to customer – but how does it work when the Price and Scope is “fixed”?</li>\n<li>\n<p>In the event of a change, you could:</p>\n<ul>\n<li>Add Sprints to the project (additional cost)</li>\n<li>Trade one feature for another</li>\n<li>So long as you haven’t started working on the feature, it should be possible to do so</li>\n</ul>\n</li>\n<li>\n<p>So change management would still work</p>\n<ul>\n<li>But you get much more flexibility in absorbing changes</li>\n</ul>\n</li>\n</ul>\n<h2>Transitioning a team/project to Scrum</h2>\n<ul>\n<li>\n<p>Ken Schwaber (co-founder of Scrum)</p>\n</li>\n<li>\n<p>If waterfall is working for you, do not follow Scrum</p>\n</li>\n<li>\n<p>75% of the teams that use Scrum are not getting full value from it</p>\n</li>\n<li>\n<p>Having said that:</p>\n</li>\n<li>\n<p>The successful implementation of Scrum will have a profound transformation</p>\n</li>\n<li>\n<p>Start on the journey anticipating resistance, but also start only if you are convinced about the benefits</p>\n</li>\n</ul>\n<h2>Steps for Transitioning a team/project to Scrum</h2>\n<ul>\n<li>\n<p>Step-1: Start with one or few teams that are willing to try it out</p>\n<ul>\n<li>Do not start if customer AND/OR senior management is not willing</li>\n<li>Skepticism is fine (even welcome), but resistance to change or closed mind is dangerous</li>\n<li>Find a champion or evangelist who is influential</li>\n</ul>\n</li>\n<li>\n<p>Step-2: Understand what you are trying to achieve and find a way to measure it</p>\n<ul>\n<li>Sell the benefits, but do not over-sell it</li>\n<li>Fore-warn people that it is hard</li>\n</ul>\n</li>\n<li>\n<p>Step-3: Call it a pilot for as long as possible</p>\n<ul>\n<li>This will make the initial chaos and mess easier to accept</li>\n</ul>\n</li>\n<li>\n<p>Step-4: Be prepared to help:</p>\n<ul>\n<li>Education for team members is important</li>\n<li>Assign a coach/mentor; do not assume they will solve all problems on their own</li>\n<li>Spend a lot more time with people who hate Scrum - find a way to involve them in the change</li>\n<li>Achieve initial successes and over-communicate about it</li>\n</ul>\n</li>\n<li>\n<p>Step-5: Understand some teams and people will NOT like it</p>\n<ul>\n<li>Do not force them or get drawn into a battle</li>\n<li>Ask if it is at least “better than before”?</li>\n<li>Make it safe for people to change their mind or withdraw</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Agile Scrum Note 10: Advanced Concepts","date":"January 29, 2016","description":"Some advanced concepts in Scrum."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/agile-scrum-notes-10/","previous":{"fields":{"slug":"/agile-scrum-notes-09/"},"frontmatter":{"title":"Agile Scrum Note 09: Monitoring Scrum Projects"}},"next":{"fields":{"slug":"/pip-install-mysqlclient-on-macos/"},"frontmatter":{"title":"How to pip install MYSQL-python/mysqlclient on macOS"}}}}
{"data":{"site":{"siteMetadata":{"title":"zehengl","author":"Zeheng Li"}},"markdownRemark":{"id":"90c472d0-31d6-5788-bf40-7bae3a3d37a5","excerpt":"Continuous Refactoring Cleaning up the code (changes that do not change the expected inputs or outputs) for one or more of the following reasons: Better…","html":"<h2>Continuous Refactoring</h2>\n<ul>\n<li>\n<p>Cleaning up the code (changes that do not change the expected inputs or outputs) for one or more of the following reasons:</p>\n<ul>\n<li>Better readability</li>\n<li>Optimizing processing logic</li>\n<li>Improving maintainability</li>\n<li>Improving performance</li>\n<li>Complying with design guidelines and framework</li>\n</ul>\n</li>\n<li>Re-factoring is a best practice - particularly important in Agile, as the code gets built incrementally</li>\n<li>The team should write re-factoring stories and request the Product owner to prioritize</li>\n<li>\n<p>Extreme Programming advocates continuous re-factoring</p>\n<ul>\n<li>Remember the Agile principle: “Continuous attention to technical excellence and good design enhances agility”</li>\n</ul>\n</li>\n</ul>\n<h2>Pair Programming</h2>\n<ul>\n<li>\n<p>Two people looking at one machine with one keyboard and one mouse</p>\n<ul>\n<li>One driver and one navigator</li>\n<li>One implements, one strategizes</li>\n<li>All code written in pairs</li>\n</ul>\n</li>\n<li>\n<p>Produces 15% less output, but:</p>\n<ul>\n<li>Leads to better design, quality</li>\n<li>Succession planning</li>\n<li>Training opportunities</li>\n</ul>\n</li>\n<li>\n<p>Especially useful while</p>\n<ul>\n<li>Writing complex logic</li>\n<li>Debugging “hard-to-solve” problems</li>\n</ul>\n</li>\n</ul>\n<h2>Continuous Integration</h2>\n<ul>\n<li>Originated with the Extreme Programming development process, as one of its original twelve practices.</li>\n<li>Continuous integration is an approach that keeps everybody’s code integrated and builds release infrastructure along with the rest of the application.</li>\n<li>\n<p>Practices of continuous integration</p>\n<ul>\n<li>Maintain a single source repository</li>\n<li>Automate the build</li>\n<li>Make your build self- testing</li>\n<li>Everyone commits to the mainline every day</li>\n<li>Every commit should build the mainline on an integration machine</li>\n<li>Keep the build fast</li>\n<li>Test in a clone of the production environment</li>\n<li>Make it easy for anyone to get the latest executable</li>\n<li>Everyone can see what’s happening</li>\n<li>Automate deployment</li>\n</ul>\n</li>\n</ul>\n<h2>Configuration Management</h2>\n<ul>\n<li>\n<p>Best practices</p>\n<ul>\n<li>Invest in automation tools (automate the build, automate the tests)</li>\n<li>Enforce discipline in code check-ins (mandatory code review workflow, mandatory tests and code coverage reports)</li>\n<li>Use static code analyzers</li>\n<li>Use tools that allow multiple check-outs and safe merges</li>\n</ul>\n</li>\n<li>Hire a good configuration manager to automate and then recede into the background</li>\n</ul>\n<h2>Quality in Agile</h2>\n<ul>\n<li>\n<p>Quality is defined as “conformance to specifications and fitness of purpose”</p>\n<ul>\n<li>Extrinsic or Customer perceived quality is perceived when the product is delivered to the customer and measured by the extent to which they realize “value” from it</li>\n<li>Intrinsic or Technical quality is the quality that is perceived by the team</li>\n<li>Technical quality has many facets including modularity, maintainability, scalability, reliability, etc.</li>\n<li>Extrinsic quality is non-negotiable, but Intrinsic quality is also critical to ensure that you can continue to deliver value</li>\n</ul>\n</li>\n</ul>\n<h2>Scrum Quality - Home truths</h2>\n<ul>\n<li>Building in “near releasable quality” Sprint after Sprint is <strong>DIFFICULT</strong> - but it is an important goal</li>\n<li>There is no separate QA team - there is ONE team and each member of the team is responsible for quality</li>\n<li>Quality has to be built into the development process</li>\n<li>Be prepared to make a heavy investment in automated testing</li>\n<li>Inspections have to be early and continuous - the later you give feedback, the harder (and costlier) it is to fix</li>\n<li>Inspections must incorporate verification (are we building the product right) and validation (are we building the right product)</li>\n</ul>\n<h2>Test Driven Development (TDD)</h2>\n<ul>\n<li>\n<p>The goal of every team should be to move towards Test-Driven Development</p>\n</li>\n<li>\n<p>Also known as Test first programming</p>\n</li>\n<li>\n<p>It is an evolutionary (iterative and incremental) approach to programming where agile software developers must first write a test that fails before they write new functional code.</p>\n</li>\n<li>\n<p>When adding a feature, a pair may perform dozens of these cycles, implementing and refining the software in baby steps until there is nothing left to add and nothing left to take away.</p>\n</li>\n<li>\n<p>Step:</p>\n<p><img src=\"http://www.agiledata.org/images/tddSteps.jpg\" alt=\"TDD\"></p>\n<ol>\n<li>Quickly add a test, basically just enough code to so that the tests now fail.</li>\n<li>Run the tests, often the complete test suite, although for sake of speed they may run only a subset to ensure that the new test does in fact fail.</li>\n<li>Update the functional code so it passes the new test.</li>\n<li>Run the tests again.</li>\n<li>If the tests fail return to step 3.</li>\n<li>Once the tests pass the next step is to start over (agilists may also want to refactor any duplication out of their design as needed).</li>\n</ol>\n</li>\n<li>\n<p>Advantages of TDD:</p>\n<ul>\n<li>TDD forces developers to do detailed design just in time (JIT) before writing the code.</li>\n<li>It ensures that agile developers have testing code available to validate their work, ensuring that they test as often and early as possible.</li>\n<li>It gives developers the courage to refactor their code to keep it the highest quality possible, because they know there is a test suite in place that will detect if they have “broken” anything as the result of refactoring.</li>\n<li>Research shows that TDD substantially reduces the incidence of defects [Janzen &#x26; Saiedian].</li>\n<li>It also helps improve your design, documents your public interfaces, and guards against future mistakes.</li>\n</ul>\n</li>\n</ul>\n<h2>Done criteria</h2>\n<ul>\n<li>It is a good idea to clearly define the meaning of the term “Done”</li>\n<li>The Scrum Master can help the team come up with these guidelines</li>\n<li>\n<p>For example, a story can be DONE when:</p>\n<ul>\n<li>Design is completed and reviewed by the architect</li>\n<li>Coding is completed for 100% of the paths described in the story</li>\n<li>Testing is completed for the story</li>\n<li>Regression testing is done to ensure no unexpected impacts</li>\n<li>All identified bugs are fixed</li>\n<li>Technical and user documentation is updated for the added/changed functionality</li>\n</ul>\n</li>\n<li>Similarly, you can define <em>DONE</em> criteria for Sprints or Releases</li>\n</ul>","frontmatter":{"title":"Agile Scrum Note 06: Best Practices","date":"January 17, 2016","description":"Some Scrum best practices you should know."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/agile-scrum-notes-06/","previous":{"fields":{"slug":"/agile-scrum-notes-05/"},"frontmatter":{"title":"Agile Scrum Note 05: Artifacts"}},"next":{"fields":{"slug":"/agile-scrum-notes-07/"},"frontmatter":{"title":"Agile Scrum Note 07: Planning"}}}}